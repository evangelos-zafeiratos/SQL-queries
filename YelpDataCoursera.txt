Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000
viii. Tip = 537 (Distinct records by foreign key user_id)
viii. Tip = 3979 (Distinct records by foreign key business_id)
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	
	SELECT *
FROM 
    user
WHERE 
    id IS NULL OR
    name IS NULL OR
    review_count IS NULL OR
    yelping_since IS NULL OR
    useful IS NULL OR
    funny IS NULL OR
    cool IS NULL OR
    fans IS NULL OR
    average_stars IS NULL OR
    compliment_hot IS NULL OR
    compliment_more IS NULL OR
    compliment_profile IS NULL OR
    compliment_cute IS NULL OR
    compliment_list IS NULL OR
    compliment_note IS NULL OR
    compliment_plain IS NULL OR
    compliment_cool IS NULL OR
    compliment_funny IS NULL OR
    compliment_writer IS NULL OR 
    compliment_photos IS NULL
	
ALTERNATIVE VERSION

SELECT 
    COUNT(*) - COUNT(id),
    COUNT(*) - COUNT(name),
    COUNT(*) - COUNT (review_count),
    COUNT(*) - COUNT (yelping_since),
    COUNT(*) - COUNT (useful),
    COUNT(*) - COUNT (funny),
    COUNT(*) - COUNT (cool),
    COUNT(*) - COUNT (fans),
    COUNT(*) - COUNT (average_stars),
    COUNT(*) - COUNT (compliment_hot),
    COUNT(*) - COUNT (compliment_more),
    COUNT(*) - COUNT (compliment_profile),
    COUNT(*) - COUNT (compliment_cute),
    COUNT(*) - COUNT (compliment_list),
    COUNT(*) - COUNT (compliment_note),
    COUNT(*) - COUNT (compliment_plain),
    COUNT(*) - COUNT (compliment_cool),
    COUNT(*) - COUNT (compliment_funny),
    COUNT(*) - COUNT (compliment_writer),
    COUNT(*) - COUNT (compliment_photos)
FROM 
    user
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5	  avg: 3.7082 
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	SELECT
        city,
        SUM(review_count) AS total_reviews
    FROM
        business
    GROUP BY city
    ORDER BY total_reviews DESC
	
	
	Copy and Paste the Result Below:
	
+-----------------+---------------+
| city            | total_reviews |
+-----------------+---------------+
| Las Vegas       |         82854 |
| Phoenix         |         34503 |
| Toronto         |         24113 |
| Scottsdale      |         20614 |
| Charlotte       |         12523 |
| Henderson       |         10871 |
| Tempe           |         10504 |
| Pittsburgh      |          9798 |
| Montréal        |          9448 |
| Chandler        |          8112 |
| Mesa            |          6875 |
| Gilbert         |          6380 |
| Cleveland       |          5593 |
| Madison         |          5265 |
| Glendale        |          4406 |
| Mississauga     |          3814 |
| Edinburgh       |          2792 |
| Peoria          |          2624 |
| North Las Vegas |          2438 |
| Markham         |          2352 |
| Champaign       |          2029 |
| Stuttgart       |          1849 |
| Surprise        |          1520 |
| Lakewood        |          1465 |
| Goodyear        |          1155 |
+-----------------+---------------+

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT
    stars AS star_rating,
    SUM(review_count) AS review_count
FROM
    business
WHERE city='Avon'
GROUP BY stars


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------------+--------------+
| star_rating | review_count |
+-------------+--------------+
|         1.5 |           10 |
|         2.5 |            6 |
|         3.5 |           88 |
|         4.0 |           21 |
|         4.5 |           31 |
|         5.0 |            3 |
+-------------+--------------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT
    AVG(stars) AS star_rating,
    SUM(review_count) AS review_count
FROM
    business
WHERE city='Beachwood'


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-------------+--------------+
| star_rating | review_count |
+-------------+--------------+
|         2.0 |            8 |
|         2.5 |            3 |
|         3.0 |           11 |
|         3.5 |            6 |
|         4.0 |           69 |
|         4.5 |           17 |
|         5.0 |           23 |
+-------------+--------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
SELECT
    name,
    review_count
FROM
    user
ORDER BY review_count DESC
LIMIT 3

	
		
	Copy and Paste the Result Below:
		
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
It is obvius that there is some correlation between the number of reviews and the number of fans. An intuitive analysis without going into much depth can be 
performed by looking at the following 2 tables:

TABLE 1 - Number of fans for the top20 review_count users
+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
+-----------+--------------+------+

TABLE 2 - Number of reviews for the top20 fans users
+-----------+------+--------------+
| name      | fans | review_count |
+-----------+------+--------------+
| Amy       |  503 |          609 |
| Mimi      |  497 |          968 |
| Harald    |  311 |         1153 |
| Gerald    |  253 |         2000 |
| Christine |  173 |          930 |
| Lisa      |  159 |          813 |
| Cat       |  133 |          377 |
| William   |  126 |         1215 |
| Fran      |  124 |          862 |
| Lissa     |  120 |          834 |
| Mark      |  115 |          861 |
| Tiffany   |  111 |          408 |
| bernice   |  105 |          255 |
| Roanna    |  104 |         1039 |
| Angela    |  101 |          694 |
| .Hon      |  101 |         1246 |
| Ben       |   96 |          307 |
| Linda     |   89 |          584 |
| Christina |   85 |          842 |
| Jessica   |   84 |          220 |
+-----------+------+--------------+

We notice that users with high number of reviews are also amongst the users with the highest number of fans, as we can find these
names in both tables. It is therefore clear that there is a direct correlation between the number of reviews and the number of fans	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Using the following 2 simple queries we conclude that the word "love" is included in much more reviews than the word "hate".

+--------------+
| love_reviews |
+--------------+
|         1780 |
+--------------+	

+--------------+
| hate_reviews |
+--------------+
|          232 |
+--------------+

	SQL code used to arrive at answer:

SELECT 
    Count(id) AS love_reviews
FROM review 
WHERE text LIKE '%love%' 

SELECT 
    Count(id) AS hate_reviews
FROM review 
WHERE text LIKE '%hate%' 

	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
SELECT 
    name,
    fans
FROM user 
ORDER BY fans DESC
LIMIT 10
    	
	Copy and Paste the Result Below:
	
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
For my analysis, I picked restaurant businesses.

i. Do the two groups you chose to analyze have a different distribution of hours?

Unfortunately, due to the format of the data, we cannot extract any insighs about the hours.
However we create a column "Open_days" to measure how many days during the week the restaurants are open. 

From this analysis we can see that most of the restaurants for both groups are open 7days/week with few exceptions, so no differentiation can be claimed in terms of opening days.
Below you can find the SQL code used to pull the full data for this analysis :

SELECT 
    b.id,
    b.name,
    b.city,
    b.latitude,
    b.longitude,
    b.review_count,
    b.is_open,
    CASE   -- Create column to categorize restaurants by Star rating
        WHEN b.stars BETWEEN 2 AND 3.5 THEN
            'GroupA'
        WHEN b.stars BETWEEN 3.501 AND 5 THEN
            'GroupB' 
        END Star_rating_group,
    COUNT(h.hours) AS Open_days -- We count the number of days during the week each restaurant is open
FROM (business AS b INNER JOIN hours as h 
                               ON b.id=h.business_id)
                    INNER JOIN category as c
                               ON b.id=c.business_id
WHERE category='Restaurants'
GROUP BY b.id



ii. Do the two groups you chose to analyze have a different number of reviews?

We can definitely see a pattern here, as the restaurants of the higher tier (3.5 - 5 Stars) have more than 3 times
the number of reviews the restaurants of the lower tire (2 - 3.5 Stars) have received.

SQL Code :

SELECT 
    CASE   -- Create column to categorize restaurants by Star rating
        WHEN b.stars BETWEEN 2 AND 3.5 THEN
            'GroupA'
        WHEN b.stars BETWEEN 3.501 AND 5 THEN
            'GroupB' 
        END Star_rating_group,
    AVG(b.review_count) AS average_reviews
FROM (business AS b INNER JOIN hours as h 
                               ON b.id=h.business_id)
                    INNER JOIN category as c
                               ON b.id=c.business_id
WHERE category='Restaurants' 
GROUP BY Star_rating_group

+-------------------+-----------------+
| Star_rating_group | average_reviews |
+-------------------+-----------------+
| GroupA            |   42.5119047619 |
| GroupB            |   148.776859504 |
+-------------------+-----------------+
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Toronto, Las Vegas, Mesa & Phoenix are the cities that emerge as the ones hosting the restaurants with the higher ratings.
+-------------+-------------------+-------------------+
| city        | No_of_restaurants | Star_rating_group |
+-------------+-------------------+-------------------+
| Toronto     |                19 | GroupB            |
| Las Vegas   |                14 | GroupB            |
| Mesa        |                14 | GroupB            |
| Phoenix     |                14 | GroupB            |
| Mississauga |                13 | GroupB            |
| Chandler    |                 7 | GroupB            |
| Chesterland |                 7 | GroupB            |
| Edinburgh   |                 7 | GroupB            |
| Middleton   |                 7 | GroupB            |
| Scottsdale  |                 7 | GroupB            |
| Charlotte   |                 6 | GroupB            |
| Cleveland   |                 6 | GroupB            |
+-------------+-------------------+-------------------+

On the other hand, Phoenix, Toronto, Pittsburgh & Mississauga have their stake on the restaurants with lower ratings.
+-----------------+-------------------+-------------------+
| city            | No_of_restaurants | Star_rating_group |
+-----------------+-------------------+-------------------+
| Phoenix         |                21 | GroupA            |
| Toronto         |                21 | GroupA            |
| Pittsburgh      |                14 | GroupA            |
| Mississauga     |                13 | GroupA            |
| Chandler        |                 7 | GroupA            |
| Fitchburg       |                 7 | GroupA            |
| Hudson          |                 7 | GroupA            |
| Las Vegas       |                 7 | GroupA            |
| Litchfield Park |                 7 | GroupA            |
| Markham         |                 7 | GroupA            |
| North Randall   |                 7 | GroupA            |
| Stuttgart       |                 7 | GroupA            |
| Verdun          |                 7 | GroupA            |
| Aurora          |                 6 | GroupA            |
| Charlotte       |                 6 | GroupA            |
| Cleveland       |                 6 | GroupA            |
| Fountain Hills  |                 6 | GroupA            |
| Montréal        |                 6 | GroupA            |
| York            |                 6 | GroupA            |
+-----------------+-------------------+-------------------+

SQL code used for analysis:

SELECT 
    b.city,
    COUNT(city) AS No_of_restaurants,
    CASE   -- Create column to categorize restaurants by Star rating
        WHEN b.stars BETWEEN 2 AND 3.5 THEN
            'GroupA'
        WHEN b.stars BETWEEN 3.501 AND 5 THEN
            'GroupB' 
        END Star_rating_group
FROM (business AS b INNER JOIN hours as h 
                               ON b.id=h.business_id)
                    INNER JOIN category as c
                               ON b.id=c.business_id
WHERE category='Restaurants' AND Star_rating_group='GroupB'
GROUP BY b.city
ORDER BY No_of_restaurants DESC

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

One difference that we notice is that there are far more checkins for the group of businesses that are still open.
The analogy of the chechins (open business) / checkins (closed business) is way greater that the analogy of open business / closed business 

+-------------+---------+
| COUNT(b.id) | is_open |
+-------------+---------+
|        1520 |       0 |
|        8480 |       1 |
+-------------+---------+


+---------+----------------+
| is_open | Checkin_Number |
+---------+----------------+
|       0 |             15 |
|       1 |            823 |
+---------+----------------+         
         
ii. Difference 2:
   
We also notice that there is a difference in the rating of businesses. On average, businesses which are open have
better rating than these which are closed.   

+---------------+---------+
|  AVG(b.stars) | is_open |
+---------------+---------+
| 3.52039473684 |       0 |
| 3.67900943396 |       1 |
+---------------+---------+

SQL code used for analysis:     
         
-- Extract the analogy between the open vs closed businesses
SELECT 
    COUNT(b.id),
    b.is_open
FROM business AS b
GROUP BY b.is_open

SELECT 
    b.is_open,
    SUM(c.count) AS Checkin_Number
FROM checkin AS c INNER JOIN business AS b ON b.id=c.business_id
GROUP BY is_open

-- Extract the average stars per business
SELECT 
    AVG(b.stars),
    b.is_open
FROM business AS b
GROUP BY b.is_open	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
I would like to exclude some insights about the category of businesses that have been closed.
This could be an indicator about the economy and useful for a future investor who wants to decide the type of business they would like to start.
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
I will extract about each business category the analogy of open/closed businesses and sort by the highest value.
This shound enact just an indicator about an economic trend or riskiness of certain business.

On the dataset used, we sort by the lowest analogy, and we can see a number of categories that do not have any active businesses
on Yelp database. Of course this is just an indicator, further analysis would be required to understand the reasons behind this.
                           
                  
iii. Output of your finished dataset:

+--------------------------+----------------+
| category                 |        analogy |
+--------------------------+----------------+
| Carpet Installation      |            0.0 |
| Chocolatiers & Shops     |            0.0 |
| Dance Clubs              |            0.0 |
| Department Stores        |            0.0 |
| Discount Store           |            0.0 |
| Dog Walkers              |            0.0 |
| Gluten-Free              |            0.0 |
| Irish                    |            0.0 |
| Italian                  |            0.0 |
| Knitting Supplies        |            0.0 |
| Lounges                  |            0.0 |
| Medical Centers          |            0.0 |
| Mobile Phone Accessories |            0.0 |
| Nurseries & Gardening    |            0.0 |
| Party Supplies           |            0.0 |
| Pet Boarding/Pet Sitting |            0.0 |
| Pet Transportation       |            0.0 |
| Pool Halls               |            0.0 |
| Seafood                  |            0.0 |
| Vegetarian               |            0.0 |
| Venues & Event Spaces    |            0.0 |
| Vietnamese               |            0.0 |
| Desserts                 | 0.333333333333 |
| American (New)           |            0.5 |
| Beer                     |            0.5 |
+--------------------------+----------------+    
         
iv. Provide the SQL code you used to create your final dataset:

-- We use the average function to calculate the amount of businesses that have been closed.
-- The closest to zero the value is, the higher the analogy
SELECT 
    c.category,
    AVG(b.is_open) AS analogy
FROM business as b INNER JOIN category AS c ON b.id=c.business_id
GROUP BY c.category
ORDER BY analogy ASC